// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileType {
  IMAGE
  AUDIO
  VIDEO
}

model MediaNFT {
  id             String    @id @default(cuid())
  tokenId        Int       @unique
  creatorAddress String    @db.VarChar(42)
  ownerAddress   String    @db.VarChar(42)
  title          String    @db.VarChar(255)
  description    String?   @db.Text
  cid            String    @db.VarChar(100)
  metadataCid    String    @db.VarChar(100)
  royaltyFee     BigInt
  category       String?   @db.VarChar(50)
  tags           String[]
  fileType       FileType?
  fileSize       BigInt?
  domain         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accessLogs MediaAccessLog[]
  transfers  MediaTransfer[]

  @@index([creatorAddress])
  @@index([ownerAddress])
}

model MediaAccessLog {
  id              String   @id @default(cuid())
  tokenId         Int
  buyerAddress    String   @db.VarChar(42)
  amountPaid      BigInt
  transactionHash String?  @db.VarChar(66)
  accessedAt      DateTime @default(now())

  mediaNFT MediaNFT @relation(fields: [tokenId], references: [tokenId])

  @@index([tokenId])
}

model MediaTransfer {
  id              String   @id @default(cuid())
  tokenId         Int
  fromAddress     String   @db.VarChar(42)
  toAddress       String   @db.VarChar(42)
  transactionHash String?  @db.VarChar(66)
  transferredAt   DateTime @default(now())

  mediaNFT MediaNFT @relation(fields: [tokenId], references: [tokenId])

  @@index([tokenId])
}
